/// <reference path="../references.ts" />
/**
 * ProcessOut module/namespace
 */
var ProcessOut;
(function (ProcessOut_1) {
    /**
     * ProcessOut main class
     */
    var ProcessOut = (function () {
        /**
         * ProcessOut constructor
         * @param  {string} projectID ProcessOut project ID
         */
        function ProcessOut(projectID) {
            /**
             * Timeout before considering the modal could not be loaded, in ms
             * @type {Number}
             */
            this.timeout = 10000;
            /**
             * String prefixed to every HTML class generated by ProcessOut.js
             * @type {string}
             */
            this.cssPrefix = "processout-";
            /**
            * Debug mode (will for instance load the sandboxed libraries of the
            * gateways instead of the live ones)
            * @type {string}
            */
            this.debug = false;
            this.projectID = projectID;
            if (this.projectID == "") {
                console.log("No project ID was specified, skipping setup.");
                return;
            }
            this.setup();
        }
        /**
         * Get the ProcessOut endpoint of the given subdomain
         * @param  {string} subdomain
         * @param  {string} path
         * @return {string}
         */
        ProcessOut.prototype.endpoint = function (subdomain, path) {
            return "https://" + subdomain + ".processout.com" + path;
        };
        /**
         * Prefixes the given class names
         * @param  {string} name
         * @return {string}
         */
        ProcessOut.prototype.classNames = function () {
            var names = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                names[_i - 0] = arguments[_i];
            }
            var str = "";
            for (var _a = 0, names_1 = names; _a < names_1.length; _a++) {
                var n = names_1[_a];
                if (str != "") {
                    str += " ";
                }
            }
            str += this.cssPrefix + n;
            return str;
        };
        /**
         * Perform a request to the ProcessOut API
         * @param  {string} method
         * @param  {string} path
         * @param  {Object} data
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        ProcessOut.prototype.apiRequest = function (method, path, data, success, error) {
            if (method != "get")
                data = JSON.stringify(data);
            else {
                var formData = new FormData();
                for (var key in data) {
                    formData.append(key, data[key]);
                }
                data = formData;
            }
            if (method == "get")
                path += "?" + formData;
            var request = new XMLHttpRequest();
            request.open(method, this.endpoint("api", path), true);
            request.setRequestHeader("Content-Type", "application/json");
            request.setRequestHeader("API-Version", "1.1.0.0");
            request.setRequestHeader("Authorization", "Basic " + btoa(this.projectID + ":"));
            request.onload = function () {
                if (request.status >= 200 && request.status < 500) {
                    success(JSON.parse(request.responseText), request.status, request);
                    return;
                }
                error(request.status, request);
            };
            request.onerror = function () {
                error(request.status, request);
            };
            request.send(data);
        };
        /**
         * Setup the gateways enabled on the current project
         * @return {void}
         */
        ProcessOut.prototype.setup = function () {
            this.apiRequest("get", "/gateways", {}, function (data, code, jqxhr) {
                if (!data.success) {
                    throw new Error(data.message);
                }
                for (var _i = 0, _a = data.gateways; _i < _a.length; _i++) {
                    var gateway = _a[_i];
                    var g = ProcessOut_1.Gateways.Handler.buildGateway(this, gateway, "", ProcessOut_1.Flow.None);
                    console.log(g);
                    g.setup();
                }
            }, function () {
                throw new Error("Could not load project's gateways. Are you sure your project ID is valid?");
            });
        };
        /**
         * Set the customer of the current request
         * @param  {Customer} customer
         * @return {void}
         */
        ProcessOut.prototype.setCustomer = function (customer) {
            this.customer = customer;
        };
        /**
         * Get the current request's customer, if any
         * @return {Customer}
         */
        ProcessOut.prototype.getCustomer = function () {
            return this.customer;
        };
        /**
         * Create a new modal
         * @param  {string}   url
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        ProcessOut.prototype.newModal = function (url, success, error) {
            var uniqId = Math.random().toString(36).substr(2, 9);
            var iframe = document.createElement('iframe');
            iframe.className = "processout-iframe";
            iframe.setAttribute("id", "processout-iframe-" + uniqId);
            iframe.setAttribute("src", url);
            iframe.setAttribute("style", "position: fixed; top: 0; left: 0; background: none;"
                + "-webkit-transform:translateZ(1px);\n                    -moz-transform:translateZ(1px);\n                    -o-transform:translateZ(1px);\n                    transform:translateZ(1px);");
            iframe.setAttribute("frameborder", "0");
            iframe.setAttribute("allowtransparency", "1");
            // Hide and add our iframe to the DOM
            iframe.style.display = "none";
            var iframeError = setTimeout(function () {
                if (typeof (error) === typeof (Function))
                    error({
                        code: ProcessOut_1.ErrorCode.ProcessOutUnavailable,
                        message: "Could not properly load the modal."
                    });
            }, this.timeout);
            iframe.onload = function () {
                clearTimeout(iframeError);
                if (typeof (success) === typeof (Function))
                    success(new ProcessOut_1.Modal(this, iframe, uniqId));
            };
            document.body.appendChild(iframe);
        };
        /**
         * Find an invoice by its ID
         * @param  {string}   uid
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        ProcessOut.prototype.findInvoice = function (uid, success, error) {
            var invoice = new ProcessOut_1.Invoice(this);
            invoice.find(uid, success, error);
        };
        /**
         * Find a recurring invoice by its ID
         * @param  {string}   uid
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        ProcessOut.prototype.findRecurringInvoice = function (uid, success, error) {
            var invoice = new ProcessOut_1.RecurringInvoice(this);
            invoice.find(uid, success, error);
        };
        return ProcessOut;
    }());
    ProcessOut_1.ProcessOut = ProcessOut;
})(ProcessOut || (ProcessOut = {}));
