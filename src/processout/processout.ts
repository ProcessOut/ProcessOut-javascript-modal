/// <reference path="../references.ts" />

/**
 * ProcessOut module/namespace
 */
module ProcessOut {

    /**
     * ProcessOut main class
     */
    export class ProcessOut {

        /**
         * Project ID
         * @type {string}
         */
        projectID: string;

        /**
         * Timeout before considering the modal could not be loaded, in ms
         * @type {Number}
         */
        timeout = 10000;

        /**
         * String prefixed to every HTML class generated by ProcessOut.js
         * @type {string}
         */
        cssPrefix = "processout-";

        /**
         * Customer linked to currency ProcessOut flow
         * @type {string}
         */
        customer: Customer;

        /**
         * ProcessOut constructor
         * @param  {string} projectID ProcessOut project ID
         */
        constructor(projectID: string) {
            this.projectID = projectID;

            if (this.projectID == "") {
                console.log("No project ID was specified, skipping setup.");
                return;
            }
            this.setup();
        }

        /**
         * Get the ProcessOut endpoint of the given subdomain
         * @param  {string} subdomain
         * @param  {string} path
         * @return {string}
         */
        endpoint(subdomain: string, path: string): string {
            return `https://${subdomain}.processout.com${path}`;
        }

        /**
         * Prefixes the given class names
         * @param  {string} name
         * @return {string}
         */
        classNames(...names: string[]): string {
            var str = "";
            for (var n of names) {
                if (str != "") {
                    str += " ";
                }
            }
                str += this.cssPrefix + n;

            return str;
        }

        /**
         * Perform a request to the ProcessOut API
         * @param  {string} method
         * @param  {string} path
         * @param  {Object} data
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        apiRequest(method: string, path: string, data,
            success: (data: any, code: number, req: XMLHttpRequest) => void,
            error: (code: number, req: XMLHttpRequest) => void): void {

            if (method != "get")
                data = JSON.stringify(data);
            else {
                var formData = new FormData();
                for (var key in data) {
                    formData.append(key, data[key]);
                }

                data = formData;
            }

            if (method == "get")
                path += `?${formData}`;

            var request = new XMLHttpRequest();
            request.open(method, this.endpoint("api", path), true);
            request.setRequestHeader("Content-Type", "application/json");
            request.setRequestHeader("API-Version", "1.1.0.0");
            request.setRequestHeader("Authorization", "Basic " + btoa(this.projectID+":"));

            request.onload = function() {
                if (request.status >= 200 && request.status < 500) {
                    success(JSON.parse(request.responseText), request.status, request);
                    return;
                }

                error(request.status, request);
            };
            request.onerror = function() {
                error(request.status, request);
            };

            request.send(data);
        }

        /**
         * Setup the gateways enabled on the current project
         * @return {void}
         */
        setup(): void {
            this.apiRequest("get", `/gateways`, {},
            function(data, code, jqxhr) {
                if (!data.success) {
                    throw new Error(data.message);
                }

                for (var gateway of data.gateways) {
                    var g = Gateways.Handler.buildGateway(
                        this, gateway, "", Flow.None);
                    console.log(g);
                    g.setup();
                }
            }, function() {
                throw new Error("Could not load project's gateways. Are you sure your project ID is valid?");
            });
        }

        /**
         * Set the customer of the current request
         * @param  {Customer} customer
         * @return {void}
         */
        setCustomer(customer: Customer): void {
            this.customer = customer;
        }

        /**
         * Get the current request's customer, if any
         * @return {Customer}
         */
        getCustomer(): Customer {
            return this.customer;
        }

        /**
         * Create a new modal
         * @param  {string}   url
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        newModal(url: string, success: (modal: Modal) => void,
            error: (err: Error) => void): void {

            var uniqId = Math.random().toString(36).substr(2, 9);
            var iframe = document.createElement('iframe');
            iframe.className = "processout-iframe";
            iframe.setAttribute("id", "processout-iframe-" + uniqId);
            iframe.setAttribute("src", url);
            iframe.setAttribute("style", "position: fixed; top: 0; left: 0; background: none;"
                    // We need to use translateZ instead of z-index, otherwise
                    // z-index might not work on some mobiles
                    +`-webkit-transform:translateZ(1px);
                    -moz-transform:translateZ(1px);
                    -o-transform:translateZ(1px);
                    transform:translateZ(1px);`);
            iframe.setAttribute("frameborder", "0");
            iframe.setAttribute("allowtransparency", "1");

            // Hide and add our iframe to the DOM
            iframe.style.display = "none";

            var iframeError = setTimeout(function() {
                if (typeof(error) === typeof(Function))
                    error(<Error>{
                        code:    ErrorCode.ProcessOutUnavailable,
                        message: "Could not properly load the modal."
                    });
            }, this.timeout);
            iframe.onload = function() {
                clearTimeout(iframeError);
                if (typeof(success) === typeof(Function))
                    success(new Modal(this, iframe, uniqId));
            };

            document.body.appendChild(iframe);
        }

        /**
         * Find an invoice by its ID
         * @param  {string}   uid
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        findInvoice(uid: string, success: (invoice: Invoice) => void,
            error: (err: Error) => void): void {

            var invoice = new Invoice(this);
            invoice.find(uid, success, error);
        }

        /**
         * Find a recurring invoice by its ID
         * @param  {string}   uid
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        findRecurringInvoice(uid: string, success: (invoice: RecurringInvoice) => void,
            error: (err: Error) => void): void {

            var invoice = new RecurringInvoice(this);
            invoice.find(uid, success, error);
        }

    }

}
