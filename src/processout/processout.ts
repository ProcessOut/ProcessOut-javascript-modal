/// <reference path="../references.ts" />

/**
 * ProcessOut module/namespace
 */
module ProcessOut {

    /**
     * ProcessOut main class
     */
    export class ProcessOut {

        /**
         * Project ID
         * @type {string}
         */
        projectId: string;

        /**
         * Timeout before considering the modal could not be loaded
         * @type {Number}
         */
        timeout = 50000;

        /**
         * String prefixed to every HTML class generated by ProcessOut.js
         * @type {string}
         */
        cssPrefix = "processout-";

        /**
         * Customer linked to currency ProcessOut flow
         * @type {string}
         */
        customer: Customer;

        /**
         * ProcessOut constructor
         * @param  {string} projectId ProcessOut project ID
         */
        constructor(projectId: string) {
            this.projectId = projectId;
        }

        /**
         * Get the ProcessOut endpoint of the given subdomain
         * @param  {string} subdomain
         * @param  {string} path
         * @return {string}
         */
        endpoint(subdomain: string, path: string): string {
            return `https://${subdomain}.processout.com${path}`;
        }

        /**
         * Prefixes the given class names
         * @param  {string} name
         * @return {string}
         */
        classNames(...names: string[]): string {
            var str = "";
            for (var n of names) {
                if (str != "") {
                    str += " ";
                }
            }
                str += this.cssPrefix + n;

            return str;
        }

        /**
         * Perform a request to the ProcessOut API
         * @param  {string} method
         * @param  {string} path
         * @param  {Object} data
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        apiRequest(method: string, path: string, data, success, error): void {
            if (method != "get")
                data = JSON.stringify(data);

            $.ajax({
                method: method,
                headers: {
                    "API-Version": "1.1.0.0",
                    "Authorization": "Basic " + btoa(this.projectId+':')
                },
                url: this.endpoint("api", path),
                data: data,
                contentType: "application/json",
                success: function(data, code, jqxhr) {
                    success(data, code, jqxhr);
                },
                error: function(request, err) {
                    error(request, err);
                }
            });
        }

        /**
         * Set the customer of the current request
         * @param  {Customer} customer
         * @return {void}
         */
        setCustomer(customer: Customer): void {
            this.customer = customer;
        }

        /**
         * Get the current request's customer, if any
         * @return {Customer}
         */
        getCustomer(): Customer {
            return this.customer;
        }

        /**
         * Create a new modal
         * @param  {string}   url
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        newModal(url: string, success: (modal: Modal) => void,
            error: (err: Error) => void): void {

            var uniqId = Math.random().toString(36).substr(2, 9);
            var iframe = jQuery("<iframe/>");
            iframe.addClass("processout-iframe")
                .attr("id", "processout-iframe-" + uniqId)
                .attr("src", url)
                .attr("style", "position: fixed; top: 0; left: 0; background: none;"
                    // We need to use translateZ instead of z-index, otherwise
                    // z-index might not work on some mobiles
                    +`-webkit-transform:translateZ(1px);
                    -moz-transform:translateZ(1px);
                    -o-transform:translateZ(1px);
                    transform:translateZ(1px);`)
                .attr("frameborder", "0")
                .attr("allowtransparency", "1");

            // Hide and add our iframe to the DOM
            iframe.hide();
            iframe.appendTo("body");

            var iframeError = setTimeout(function() {
                if (typeof(error) === typeof(Function))
                    error(<Error>{
                        code:    ErrorCode.ProcessOutUnavailable,
                        message: "Could not properly load the modal."
                    });
            }, this.timeout);
            iframe.load(function() {
                clearTimeout(iframeError);
                if (typeof(success) === typeof(Function))
                    success(new Modal(this, iframe, uniqId));
            });
        }

        /**
         * Find an invoice by its ID
         * @param  {string}   uid
         * @param  {callback} success
         * @param  {callback} error
         * @return {void}
         */
        findInvoice(uid: string, success: (invoice: Invoice) => void,
            error: (err: Error) => void): void {

            var invoice = new Invoice(this);
            invoice.find(uid, success, error);
        }

    }

}
